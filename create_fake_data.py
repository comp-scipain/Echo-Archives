import sqlalchemy
import os
import dotenv
from faker import Faker

def database_connection_url():
    dotenv.load_dotenv()
    DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql+psycopg2://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True, pool_pre_ping=True)

with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS public.employees;
    DROP TABLE IF EXISTS public.dept;
    DROP TABLE IF EXISTS public.history;

    CREATE TABLE public.dept(
        dept_id BIGINT GENERATED BY DEFAULT AS IDENTITY, 
        created_at timestamp with time zone not null default now(),
        dept_name TEXT NULL,
        base_pay FLOAT,
        dept_populus INT
    ) TABLESPACE pg_default;

    CREATE TABLE public.employees(
        id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        hire_date timestamp with time zone not null default now(),
        name TEXT NULL,
        skills TEXT NULL,
        pay REAL,
        department TEXT NULL,
        level INTEGER
    ) TABLESPACE pg_default;

    CREATE TABLE public.history(
        ledger_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
        created_at timestamp with time zone not null default now(),
        emp_name TEXT NULL,
        days_employed BIGINT,
        day_wage FLOAT,
        in_dept TEXT NULL,
        emp_id BIGINT
    ) TABLESPACE pg_default;
    """))

num_users = 10
fake = Faker()

unique_departments = [fake.word() for _ in range(100)]
department_base_pay = {dept: fake.pyfloat(positive=True, min_value=30000, max_value=150000) for dept in unique_departments}

with engine.begin() as conn:
    print("Creating unique departments...")
    for dept in unique_departments:
        conn.execute(sqlalchemy.text("INSERT INTO dept (dept_name, base_pay, dept_populus) VALUES (:dept_name, :base_pay, :dept_populus)"),
        {"dept_name": dept, "base_pay": department_base_pay[dept], "dept_populus": 0})

    print("Creating fake employees and history records...")
    for i in range(num_users):
        if (i % 10000 == 0):
            print(f"Inserted {i} employees")
        
        emp_id = i + 1
        profile = fake.profile()
        skills = ", ".join(fake.words())
        department = fake.random_element(unique_departments)
        base_pay = department_base_pay[department]
        pay = fake.pyfloat(positive=True, min_value=base_pay, max_value=180000)
        day_wage = base_pay / 260  # 260 working days in a year
        level = fake.pyint(min_value=-2, max_value=12)
        days_employed = fake.pyint(min_value=1, max_value=10000)

        conn.execute(sqlalchemy.text("INSERT INTO employees (name, skills, pay, department, level) VALUES (:name, :skills, :pay, :department, :level)"),
        {"name": profile['name'], "skills": skills, "pay": pay, "department": department, "level": level})

        conn.execute(sqlalchemy.text("INSERT INTO history (emp_name, days_employed, day_wage, in_dept, emp_id) VALUES (:emp_name, :days_employed, :day_wage, :in_dept, :emp_id)"),
        {"emp_name": profile['name'], "days_employed": days_employed, "day_wage": day_wage, "in_dept": department, "emp_id": emp_id})
