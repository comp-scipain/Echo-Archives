import sqlalchemy
import os
import dotenv
from faker import Faker
import numpy as np

def database_connection_url():
    dotenv.load_dotenv()
    DB_USER: str = os.environ.get("POSTGRES_USER")
    DB_PASSWD = os.environ.get("POSTGRES_PASSWORD")
    DB_SERVER: str = os.environ.get("POSTGRES_SERVER")
    DB_PORT: str = os.environ.get("POSTGRES_PORT")
    DB_NAME: str = os.environ.get("POSTGRES_DB")
    return f"postgresql://{DB_USER}:{DB_PASSWD}@{DB_SERVER}:{DB_PORT}/{DB_NAME}"

# Create a new DB engine based on our connection string
engine = sqlalchemy.create_engine(database_connection_url(), use_insertmanyvalues=True)

with engine.begin() as conn:
    conn.execute(sqlalchemy.text("""
    DROP TABLE IF EXISTS public.employees;
    DROP TABLE IF EXISTS public.dept;

    create table
    public.dept(
        dept_id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
        created_at timestamp with time zone not null default now(),
        dept_name TEXT NULL,
        dept_id INTEGER NOT NULL UNIQUE,
        base_pay FLOAT,
        dept_populus INT,
        CONSTRAINT dept_id_pkey PRIMARY KEY (dept_id)
    ) tablespace pg_default;


    create table 
    public.employees(
        employee.id bigint generated by default as identity,
        hire_date timestamp with time zone not null,
        name text null,
        skills text null,
        pay REAL,
        department text null,
        level integer,
        CONSTRAINT employees_pkey PRIMARY KEY (employee_id)
    ) tablespace pg_default;


    create table 
    public.history(
        ledger_id bigint generated by default as identity,
        created_at timestamp with time zone not null default now(),
        emp_name text null,
        days_employed bigint,
        day_wage float,
        in_dept text null,
        emp_id bigint
        
    ) tablespace pg_default;
    """))
    

num_users = 1000000
fake = Faker()

# create fake employee data
with engine.begin() as conn:
    print("creating fake data...")
    for i in range(num_users):
        if (i % 10 == 0):
            print(i)
        
        profile = fake.profile()
        departments = fake.sentence()
        skills = fake.words()
        pay, base_pay, day_wage = fake.pyfloat()
        dept_id, dept_populus, level, _id, emp_id, ledger_id = fake.pyint()

        dept = conn.execute(sqlalchemy.text("INSERT INTO dept (dept_name, dept_id, base_pay, dept_populus) VALUES (:dept_name, :dept_id, :base_pay, :dept_populus)"),
        {"dept_name": departments,"dept_id":dept_id,"base_pay":base_pay,"dept_populus":dept_populus})

        employees = conn.execute(sqlalchemy.text("INSERT INTO employee (id, name, skills, pay, department, level, hire_date) VALUES (:id, :name, :skills, :pay, :department, :level, :hire_date)"),
        {"id":_id,"name":profile['name'],"skills":skills,"pay":pay,"department":departments,"level":level})
    
